geom_violin(aes(fill=celltype)) +
scale_fill_manual(values = colours) +
ggrastr::geom_jitter_rast(aes(color=orig.celltype),size=0.1,alpha=0.5) + NoLegend() +
scale_color_manual(values = old_colours) +
facet_wrap(~celltype,labeller = label_wrap_gen(width=10)) +
ylab("Correlation score") + xlab("")
}
p <- plotScores(rabbit.sr,colours = ext_celltype_colours,
old_annotation = rabbit.sce$celltype,old_colours = celltype_colours)
ggsave("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\cell_type_annotation\\SingleR\\mouse-extended\\score_dist.pdf",
p,width=12,height = 15,units = "in")
ggsave("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\cell_type_annotation\\SingleR\\mouse-extended\\score_dist_v2.pdf",
p,width=12,height = 15,units = "in")
values <- getTopNDelta(rabbit.sr,n=5)
rabbit.sce$delta_top5 <- values
plotReducedDim(rabbit.sce,"UMAP",colour_by = "delta_top5") + scale_fill_viridis(option="cividis")
plotReducedDim(rabbit.sce,"UMAP",colour_by = "delta_top5") + scale_color_viridis(option="cividis")
plotReducedDim(rabbit.sce,"UMAP",colour_by = "delta_top5",point_size=0.1) + scale_color_viridis(option="cividis") + theme(aspect.ratio = 1)
plotReducedDim(rabbit.sce,"UMAP",colour_by = "delta_top5",point_size=0.5) + scale_color_viridis(option="cividis") + theme(aspect.ratio = 1)
?miloR::buildGraph
?miloR::Milo
source('G:/My Drive/Postgrad/PhD/Projects/rabbit-gastrulation-atlas/analysis/nhood_similarity/cluster/calculate_nhood_similarity.R')
mouse.sce <- readRDS("G://My Drive/Postgrad/PhD/Projects/rabbit-gastrulation-atlas/trajectory_analysis/pipeline/1 - extract_trajectories/mouse-extended/Allantois.rds")
mouse.meta <- read.csv("G://My Drive/Postgrad/PhD/Projects/data/Ross_Handler_2020/integrated_metadata.tsv",sep="\t")
mouse.pcs <- readRDS("G://My Drive/Postgrad/PhD/Projects/data/Ross_Handler_2020/integrated_corrected_pcs.rds")
reducedDim(mouse.sce, "UMAP") <- mouse.meta[colnames(mouse.sce),c("BBKNN_UMAP1","BBKNN_UMAP2")]
reducedDim(mouse.sce,"PCA") <- mouse.pcs[colnames(mouse.sce),]
mouse.one2one <- mouse.homologs[mouse.homologs$mmusculus_homolog_orthology_type=="ortholog_one2one",]
source('G:/My Drive/Postgrad/PhD/Projects/rabbit-gastrulation-atlas/analysis/src/cross_species.R', echo=TRUE)
# Load one-to-one orthologs
mouse.homologs <- read.table("G:\\My Drive\\Postgrad\\PhD\\Projects\\data\\Ton_2020\\v2\\homologs\\mmusculus.tab")
# Load one-to-one orthologs
mouse.homologs <- read.table("G:\\My Drive\\Postgrad\\PhD\\Projects\\data\\Ton_2020\\v2\\homologs\\mmusculus.tab")
mouse.one2one <- mouse.homologs[mouse.homologs$mmusculus_homolog_orthology_type=="ortholog_one2one",]
sfs<- filterSharedFeatures(rownames(mouse.sce),"mmusculus",mouse.one2one)
rabbit.milo <- Milo(rabbit.sce)
mouse.milo <- Milo(mouse.sce)
rabbit.milo <- buildGraph(rabbit.milo,k=30,d=50)
rabbit.milo <- buildGraph(rabbit.milo,k=100,d=50)
rabbit.milo <- makeNhoods(rabbit.milo,prop=0.05,k=100,
d=50,refined=T)
rabbit.milo
reducedDim(rabbit.sce,"PCA") <- as.matrix(reducedDim(rabbit.sce,"PCA"))
rownames(rabbit.sce) <- rowData(rabbit.sce)[,1]
rabbit.milo <- makeNhoods(rabbit.milo,prop=0.05,k=100,
d=50,refined=T)
rabbit.milo <- Milo(rabbit.sce)
rabbit.milo <- buildGraph(rabbit.milo,k=30,d=50)
rabbit.milo <- makeNhoods(rabbit.milo,prop=0.1,k=30,
d=50,refined=T)
head(table(rabbit.sce$cluster))
head(table(rabbit.sce$leiden))
cluster_ncells <- colData(rabbit.sce) %>% count(cluster,annot)
annot="singler_ext"
cluster="cluster"
cluster_ncells <- colData(rabbit.sce) %>% count(cluster,annot)
cluster_ncells <- colData(rabbit.sce) %>% dplyr::count(cluster,annot)
cluster_ncells <- colData(rabbit.sce) %>% dplyr::count("cluster")
?dplyr::count
cluster_ncells <- as.data.frame(colData(rabbit.sce)) %>% dplyr::count("cluster")
head(cluster_ncells)
cluster_ncells <- as.data.frame(colData(rabbit.sce)) %>% dplyr::count(cluster,singler_ext)
head(cluster_ncells)
cluster_ncells <- as.data.frame(colData(rabbit.sce)) %>% dplyr::count(!!cluster,!!annot)
head(cluster_ncells)
cluster_ncells <- as.data.frame(colData(rabbit.sce)) %>% dplyr::count(get(cluster),get(annot))
cluster_ncells <- as.data.frame(colData(rabbit.sce)) %>% dplyr::count(get(cluster),get(annot))
get(cluster)
cluster_ncells <- as.data.frame(colData(rabbit.sce)) %>% dplyr::count(as.symbol(cluster),as.symbol(annot))
cluster_ncells <- as.data.frame(colData(rabbit.sce)) %>% dplyr::count(as.name(cluster),as.name(annot))
cluster_ncells <- as.data.frame(colData(rabbit.sce)) %>% dplyr::count(across(cluster),across(annot))
cluster_ncells <- as.data.frame(colData(rabbit.sce)) %>% group_by_at(cluster,annot) %>% tally
cluster_ncells <- as.data.frame(colData(rabbit.sce)) %>% group_by_at(c(cluster,annot)) %>% tally
head(cluster_ncells)
cluster_ncells / cluster_total
cluster_total <- table(rabbit.sce[[cluster]])
cluster_ncells / cluster_total
cluster_frac <- as.data.frame(colData(rabbit.sce)) %>%
group_by_at(c(cluster,annot)) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
cluster_frac <- as.data.frame(colData(rabbit.sce)) %>%
group_by_at(c(cluster,annot)) %>%
dplyr::summarise(n = n()) %>%
mutate(freq = n / sum(n))
head(cluster_frac)
cluster_frac <- as.data.frame(colData(rabbit.sce)) %>%
group_by_at(cluster,annot) %>%
dplyr::summarise(n = n()) %>%
mutate(freq = n / sum(n))
cluster_frac <- as.data.frame(colData(rabbit.sce)) %>%
group_by(cluster,annot) %>%
dplyr::summarise(n = n()) %>%
mutate(freq = n / sum(n))
?group_by_at
cluster_frac <- as.data.frame(colData(rabbit.sce)) %>%
group_by(across(cluster),across(annot)) %>%
dplyr::summarise(n = n()) %>%
mutate(freq = n / sum(n))
head(cluster_frac)
head(cluster_total)
as.data.frame(colData(rabbit.sce)) %>%
group_by(across(cluster),across(annot)) %>%
as.data.frame(colData(rabbit.sce)) %>%
group_by(across(cluster),across(annot))
df <- data.frame(cluster=rabbit.sce[[cluster]],
annot=rabbit.sce[[annot]])
cluster_frac <- df %>%
group_by(cluster,annot) %>%
dplyr::summarise(n = n()) %>%
mutate(freq = n / sum(n))
head(df)
cluster_frac <- df %>%
group_by(cluster,annot) %>%
dplyr::summarise(n = n()) %>%
mutate(freq = n / sum(n))
head(cluster_frac)
cluster_frac <- df %>%
count(cluster,annot) %>%
group_by(annot) %>%
mutate(freq = n / sum(n))
df <- data.frame(cluster=rabbit.sce[[cluster]],
annotation=rabbit.sce[[annot]])
cluster_frac <- df %>%
count(cluster,annotation) %>%
group_by(annot) %>%
mutate(freq = n / sum(n))
df
df <- data.frame(clusters=rabbit.sce[[cluster]],
annotation=rabbit.sce[[annot]])
cluster_frac <- df %>%
count(clusters,annotation) %>%
group_by(annot) %>%
mutate(freq = n / sum(n))
cluster_frac <- df %>%
count(clusters,annotation) %>%
group_by(annotation) %>%
mutate(freq = n / sum(n))
head(df)
cluster_frac <- df %>%
group_by(clusters,annotation) %>%
dplyr::summarise(n = n()) %>%
mutate(freq = n / sum(n))
head(cluster_frac)
cluster_frac <- df %>%
group_by(clusters,annotation) %>%
dplyr::summarise(n = n())
head(cluster_frac)
cluster_frac <- df %>%
group_by(clusters,annotation) %>%
dplyr::summarise(n = n()) %>%
mutate(freq = n / sum(n))
head(cluster_frac)
cluster_frac <- df %>%
group_by(clusters,annotation) %>%
dplyr::summarise(n = n()) %>%
group_by(clusters)
head(cluster_frac)
cluster_frac <- df %>%
group_by(clusters,annotation) %>%
dplyr::summarise(n = n()) %>%
mutate(freq = n / sum(n))
head(cluster_frac)
head(cluster_total)
10891 /11010
cluster_frac <- df %>%
group_by(clusters,annotation) %>%
dplyr::summarise(n = n()) %>%
dplyr::mutate(freq = n / sum(n))
head(cluster_frac)
colours=ext_celltype_colours
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=clusters)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values=colours)
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=clusters)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values=colours) + NoLegend()
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=clusters)) +
geom_bar(position="stack", stat="identity") + theme_minimal() +
scale_fill_manual(values=colours) + NoLegend()
cluster
cluster="leiden"
df <- data.frame(clusters=rabbit.sce[[cluster]],
annotation=rabbit.sce[[annot]])
cluster_frac <- df %>%
group_by(clusters,annotation) %>%
dplyr::summarise(n = n()) %>%
dplyr::mutate(freq = n / sum(n))
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=clusters)) +
geom_bar(position="stack", stat="identity") + theme_minimal() +
scale_fill_manual(values=colours) + NoLegend()
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=clusters)) +
geom_bar(position="stack", stat="identity") + theme_classic() +
scale_fill_manual(values=colours) + NoLegend()
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=clusters)) +
geom_bar(position="stack", stat="identity") +
facet_grid(~clusters) +
theme_minimal() +
scale_fill_manual(values=colours) + NoLegend()
cluster <- "cluster"
df <- data.frame(clusters=rabbit.sce[[cluster]],
annotation=rabbit.sce[[annot]])
cluster_frac <- df %>%
group_by(clusters,annotation) %>%
dplyr::summarise(n = n()) %>%
dplyr::mutate(freq = n / sum(n))
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=clusters)) +
geom_bar(position="stack", stat="identity") +
facet_grid(~clusters) +
theme_minimal() +
scale_fill_manual(values=colours) + NoLegend()
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=clusters)) +
geom_bar(position="stack", stat="identity") +
facet_grid(~clusters,rows = 4) +
theme_minimal() +
scale_fill_manual(values=colours) + NoLegend()
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=clusters)) +
geom_bar(position="stack", stat="identity") +
facet_grid(~clusters,rows = 4,cols=7) +
theme_minimal() +
scale_fill_manual(values=colours) + NoLegend()
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=clusters)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(~clusters) +
theme_minimal() +
scale_fill_manual(values=colours) + NoLegend()
ggplot(cluster_frac, aes(fill=annotation, y=freq)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(~clusters) +
theme_minimal() +
scale_fill_manual(values=colours) + NoLegend()
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=0)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(~clusters) +
theme_minimal() +
scale_fill_manual(values=colours) + NoLegend()
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=0)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(~clusters) +
theme_minimal() + theme(axis.text.x = element_blank())
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=0)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(~clusters) +
theme_minimal() + theme(axis.text.x = element_blank()) +
scale_fill_manual(values=colours) + NoLegend()
plotClusterFraction <- function(rabbit.sce,annot="singler_ext",
cluster="cluster",colours=ext_celltype_colours) {
df <- data.frame(clusters=rabbit.sce[[cluster]],
annotation=rabbit.sce[[annot]])
cluster_frac <- df %>%
group_by(clusters,annotation) %>%
dplyr::summarise(n = n()) %>%
dplyr::mutate(freq = n / sum(n))
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=0)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(~clusters) +
theme_minimal() + theme(axis.text.x = element_blank()) +
xlab("Clusters") + ylab("Cell type fraction") +
scale_fill_manual(values=colours) + NoLegend()
}
plotClusterFraction <- function(rabbit.sce,annot="singler_ext",
cluster="cluster",colours=ext_celltype_colours) {
df <- data.frame(clusters=rabbit.sce[[cluster]],
annotation=rabbit.sce[[annot]])
cluster_frac <- df %>%
group_by(clusters,annotation) %>%
dplyr::summarise(n = n()) %>%
dplyr::mutate(freq = n / sum(n))
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=0)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(~clusters) +
theme_minimal() + theme(axis.text.x = element_blank()) +
xlab("Clusters") + ylab("Cell type fraction") +
scale_fill_manual(values=colours) + NoLegend()
}
plotClusterFraction <- function(sce,annot="singler_ext",
cluster="cluster",colours=ext_celltype_colours) {
df <- data.frame(clusters=sce[[cluster]],
annotation=sce[[annot]])
cluster_frac <- df %>%
group_by(clusters,annotation) %>%
dplyr::summarise(n = n()) %>%
dplyr::mutate(freq = n / sum(n))
ggplot(cluster_frac, aes(fill=annotation, y=freq, x=0)) +
geom_bar(position="stack", stat="identity") +
facet_wrap(~clusters) +
theme_minimal() + theme(axis.text.x = element_blank()) +
xlab("Clusters") + ylab("Cell type fraction") +
scale_fill_manual(values=colours) + NoLegend()
}
plotClusterFraction(rabbit.sce,cluster="leiden_5")
rabbit.sce$leiden_3 <- as.factor(rabbit.meta$leiden_3)
rabbit.sce$leiden_1 <- as.factor(rabbit.meta$leiden_1)
rabbit.sce$leiden_5 <- as.factor(rabbit.meta$leiden_5)
plotReducedDim(rabbit.sce,"UMAP",colour_by = "leiden_3",text_by = "leiden_3") + NoLegend()
plotReducedDim(rabbit.sce,"UMAP",colour_by = "leiden_3",text_by = "leiden_3")
plotClusterFraction(rabbit.sce,cluster="leiden_3")
plotClusterFraction(rabbit.sce,cluster="leiden_1")
plotClusterFraction(rabbit.sce$,cluster="leiden")
plotClusterFraction(rabbit.sce,cluster="leiden")
plotReducedDim(rabbit.sce,"UMAP",colour_by = "leiden",text_by = "leiden")  + scale_color_brewer()
plotReducedDim(rabbit.sce,"UMAP",colour_by = "leiden",text_by = "leiden")  + scale_color_discrete()
?scale_color_brewer
plotReducedDim(rabbit.sce,"UMAP",colour_by = "leiden",text_by = "leiden")  + scale_color_brewer(type="qual")
rabbit.sce$leiden[1:5]
class(rabbit.sce$leiden[1:5])
rabbit.sce$leiden <- as.factor(rabbit.meta$leiden)
plotReducedDim(rabbit.sce,"UMAP",colour_by = "leiden",text_by = "leiden")  + scale_color_brewer(type="qual")
plotReducedDim(rabbit.sce,"UMAP",colour_by = "leiden",text_by = "leiden")  + scale_color_discrete()
plotClusterFraction(rabbit.sce,cluster="leiden")
# Load rabbit data
rabbit.sce <- readRDS("G://My Drive/Postgrad/PhD/Projects/rabbit-gastrulation-atlas/trajectory_analysis/pipeline/1 - extract_trajectories/rabbit/Allantoic mesoderm.rds")
reducedDim(rabbit.sce,"PCA") <- as.matrix(reducedDim(rabbit.sce,"PCA"))
rownames(rabbit.sce) <- rowData(rabbit.sce)[,1]
head(rabbit.meta)
rabbit.sce <- .loadRabbitData("full")
remove(rabbit.meso)
rabbit.sce <- .loadRabbitData("full")
remove(mouse.sce)
rabbit.sce <- .loadRabbitData("full")
remove(rabbit.sub)
remove(mouse.milo)
rabbit.sce <- .loadRabbitData("full")
rabbit.singler_ext <- read.table("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\cell_type_annotation\\SingleR\\mouse-extended\\singler_annotations.tsv",
sep="\t",row.names = F,col.names = T)
rabbit.singler_ext <- read.table("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\cell_type_annotation\\SingleR\\mouse-extended\\singler_annotations.tsv",
sep="\t",row.names = F)
rabbit.singler_ext <- read.table("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\cell_type_annotation\\SingleR\\mouse-extended\\singler_annotations.tsv",
sep="\t")
head(rabbit.singler_ext)
rabbit.singler_ext <- read.table("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\cell_type_annotation\\SingleR\\mouse-extended\\singler_annotations.tsv",
sep="\t",col.names = 1)
rabbit.singler_ext <- read.table("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\cell_type_annotation\\SingleR\\mouse-extended\\singler_annotations.tsv",
sep="\t",header = T)
head(rabbit.singler_ext)
.loadRabbitData <- function(ncells="10k",normalise=T) {
rabbit.sce <- readRDS(paste0("G:\\My Drive\\Postgrad\\PhD\\Projects\\data\\Ton_2020\\v2\\samples\\sample_",ncells,".RDS"))
rabbit.meta <- read.csv("G:\\My Drive\\Postgrad\\PhD\\Projects\\data\\Ton_2020\\v2\\data\\meta.tab",
sep = "\t",header = TRUE)
rownames(rabbit.meta) <- rabbit.meta$index
rabbit.sce$cluster <- rabbit.meta[colnames(rabbit.sce),"leiden_2"]
rabbit.celltypes <- read.csv("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\cell_type_annotation\\annotations_30-11-20.csv",
row.names = 1)
rabbit.sce$celltype <-  rabbit.celltypes[colnames(rabbit.sce),"celltype"]
rabbit.singler_ext <- read.table("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\cell_type_annotation\\SingleR\\mouse-extended\\singler_annotations.tsv",
sep="\t",header = T)
rabbit.sce$singler_ext <- rabbit.singler_ext[colnames(rabbit.sce),"celltype"]
rabbit.pcs <- fread("G:\\My Drive\\Postgrad\\PhD\\Projects\\data\\Ton_2020\\v2\\data\\corrected_pcs.tsv",sep="\t",
data.table = F,col.names=c("cell",paste0("PC",seq(1:50))),showProgress = F,fill=T)
rownames(rabbit.pcs) <- rabbit.pcs$cell
rabbit.pcs <- rabbit.pcs[,-1]
reducedDim(rabbit.sce,"PCA") <- rabbit.pcs[colnames(rabbit.sce),]
rabbit.genes <- read.csv("G:\\My Drive\\Postgrad\\PhD\\Projects\\data\\Ton_2020\\v2\\other\\visual\\features.tsv",sep="\t",header = F,
col.names = c("ensembl_id","gene_name","feature_type"))
rowData(rabbit.sce)$gene_name = rowData(rabbit.sce)[,1]
rowData(rabbit.sce)[rabbit.genes$ensembl_id,"gene_name"] <- rabbit.genes$gene_name
rownames(rabbit.sce) <- rowData(rabbit.sce)$gene_name
if(normalise) {
rabbit.size_factors <- read.csv("G:\\My Drive\\Postgrad\\PhD\\Projects\\data\\Ton_2020\\v2\\data\\size_factors.tsv",
sep="\t",header = T,  col.names= c("cell","sizeFactors"),row.names = "cell" )
rabbit.sce <- logNormCounts(rabbit.sce,size_factors=rabbit.size_factors[colnames(rabbit.sce),"sizeFactors"])
}
return(rabbit.sce)
}
rabbit.sce <- .loadRabbitData("full")
remove(rabbit.milo)
rabbit.sce <- .loadRabbitData("full")
remove(mouse.pcs)
remove(rabbit.ant_mes)
remove(rabbit.ant_mes)
rabbit.sce <- .loadRabbitData("full")
rabbit.sce <- .loadRabbitData("full")
source('G:/My Drive/Postgrad/PhD/Projects/rabbit-gastrulation-atlas/analysis/src/load.R', echo=TRUE)
rabbit.sce <- .loadRabbitData("full")
source('G:/My Drive/Postgrad/PhD/Projects/rabbit-gastrulation-atlas/analysis/src/load.R', echo=TRUE)
rabbit.sce <- .loadRabbitData("full")
rabbit.nn <- read.table("G:\My Drive\Postgrad\PhD\Projects\rabbit-gastrulation-atlas\integration\SAMap\rabbit-mouse-ext\\rabbit_samap_nearest_neighbours.csv")
rabbit.nn <- read.table("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\integration\\SAMap\\rabbit-mouse-ext\\rabbit_samap_nearest_neighbours.csv")
rabbit.nn <- read.table("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\integration\\SAMap\\rabbit-mouse-ext\\rabbit_samap_nearest_neighbours.csv",row.names = T)
rabbit.nn <- read.table("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\integration\\SAMap\\rabbit-mouse-ext\\rabbit_samap_nearest_neighbours.csv",row.names = T,header = T)
rabbit.nn <- read.table("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\integration\\SAMap\\rabbit-mouse-ext\\rabbit_samap_nearest_neighbours.csv",row.names = T,header = T,sep=",")
rabbit.nn <- read.csv("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\integration\\SAMap\\rabbit-mouse-ext\\rabbit_samap_nearest_neighbours.csv")
head(rabbit.nn)
rabbit.nn <- read.csv("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\integration\\SAMap\\rabbit-mouse-ext\\rabbit_samap_nearest_neighbours.csv",row.names = F)
rabbit.nn <- read.csv("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\integration\\SAMap\\rabbit-mouse-ext\\rabbit_samap_nearest_neighbours.csv",row.names = 1)
head(rabbit.nn)
rabbit.nn <- read.csv("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\integration\\SAMap\\rabbit-mouse-ext\\rabbit_samap_nearest_neighbours.csv",row.names = 1,col.names = c("celltype"))
rabbit.nn <- read.csv("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\integration\\SAMap\\rabbit-mouse-ext\\rabbit_samap_nearest_neighbours.csv",row.names = 1,col.names = "celltype")
rabbit.nn <- read.csv("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\integration\\SAMap\\rabbit-mouse-ext\\rabbit_samap_nearest_neighbours.csv",row.names = 1)
colnames(rabbit.nn)[1] <- "celltype"
head(rabbit.nn)
rabbit.sce$samap_nn <- rabbit.nn$celltype
source('G:/My Drive/Postgrad/PhD/Projects/rabbit-gastrulation-atlas/analysis/src/plot.R', echo=TRUE)
plotUMAP(rabbit.sce,"samap_nn",colours = ext_celltype_colours)
plotUMAP(rabbit.sce,"samap_nn",colours = ext_celltype_colours,legend_position = NULL)
plotUMAP(rabbit.sce,"samap_nn",colours = ext_celltype_colours,legend_position = "none")
plotUMAP <- function(sce,colour_by="celltype",point_size=1,legend_position="right",colours=celltype_colours) {
ggcells(sce, aes_string(x="UMAP.1",y="UMAP.2",colour=factor(sce[[colour_by]], levels = names(colours)))) +
scale_color_manual(values = colours, name = "") + xlab("UMAP1") + ylab("UMAP2") +
ggrastr::geom_point_rast(size = point_size) + theme_bw() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position=legend_position,
aspect.ratio = 1) +
guides(col = guide_legend(override.aes = list(size = 5))) +
theme(panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid = element_blank())
}
plotUMAP(rabbit.sce,"samap_nn",colours = ext_celltype_colours,legend_position = "none",point_size = 0.2)
test <- read.csv("C:/Users/Daniel Keitley/Downloads/GSE139218_RAW/GSM4134188_LG-A_HF2K3BGXC_S7_R2.TranscriptCounts-2.tsv",sep="\t")
test[1:5,1:5]
dim(test)
tail(test)
test[1:5,1:5]
unlink('G:/My Drive/Postgrad/PhD/Projects/rabbit-gastrulation-atlas/scrabbit/notebooks/predict_cell_types_cache', recursive = TRUE)
library(scater)
?plotReducedDim
?select
?ggrepel
library(SingleR)
?classifySingleR
?trainSingleR
?trainSingleR
?match
?rbind
?intersect
?order
?ComplexHeatmap::Heatmap
?classifySingleR
?apply
?grepl
?scran::getTopHVGs
?colSums
?match
?which.max
?with
?get
?ggsave
?colMeans
?match
?format
?setNames
?V
?coord_cartesian
library(stringr)
library(tidyr)
dir_path <- "G:/My Drive/Postgrad/PhD/Projects/rabbit-gastrulation-atlas/private/ArrayExpress/"
sdrf <- read.table(paste0(dir_path, "E-MTAB-11836_v2~/submission14669_annotare_v2.sdrf"),
header = TRUE, sep = "\t")
sdrf <- read.table(paste0(dir_path, "E-MTAB-11836_v2~/submission14669_annotare_v2.sdrf.txt"),
header = TRUE, sep = "\t")
head(sdrf)
tail(sdrf)
head(str_split_fixed(sdrf$Assay.Name, "_", 2))
str_split_fixed(sdrf$Assay.Name, "SIGA", 2)
head(str_split_fixed(sdrf$Assay.Name, "SIGA*", 2))
str_extract(sdrf$Assay.Name, "SIGA+")
str_extract(sdrf$Assay.Name, "*SIGA[A-Z]+")
str_extract(sdrf$Assay.Name, "_SIGA[A-Z]+_")
str_extract(sdrf$Assay.Name, "SIGA[A-Z]+")
str_extract(sdrf$Assay.Name, "SIGA[A-Z]+_")
str_extract(sdrf$Assay.Name, "SIGA[A-Z]+\\_")
str_extract(sdrf$Assay.Name, "SIGA[A-Z]+[0-9]+")
head(str_extract(sdrf$Assay.Name, "SIGA[A-Z]+[0-9]+"))
head(sdrf$Source.Name)
tail(str_extract(sdrf$Assay.Name, "SIGA[A-Z]+[0-9]+"))
tail(sdrf)
sdrf$Source.Name <- str_extract(sdrf$Assay.Name, "SIGA[A-Z]+[0-9]+")
sdrf$Characteristics.sex.<- "not available"
sdrf$Characteristics.organism.part. <- "whole organism"
sdrf[sdrf$Source.Name %in% c("SIGAA12", "SIGAE12"), "Characteristics.organism.part."] <- "anterior"
sdrf[sdrf$Source.Name %in% c("SIGAB12", "SIGAF12"), "Characteristics.organism.part."] <- "mid"
sdrf[sdrf$Source.Name %in% c("SIGAC12", "SIGAG12"), "Characteristics.organism.part."] <- "posterior"
sdrf[sdrf$Source.Name %in% c("SIGAD12", "SIGAH12","SIGAG8","SIGAH11"), "Characteristics.organism.part."] <- "yolk sac/extraembryonic"
sd
sdrf[sdrf$Source.Name %in% c("SIGAH8", "SIGAF11", "SIGAG11"), "Characteristics.organism.part."] <- "embryo-proper"
tail(sdrf)
individual_dict <- data.frame(samples = sample_order, row.names = sample_order)
sample_order <- c("SIGAA9", "SIGAB9", "SIGAC9","SIGAD9", "SIGAE9", "SIGAF9",
"SIGAA11", "SIGAB11", "SIGAC11", "SIGAD11", "SIGAE11",
"SIGAA12", "SIGAB12", "SIGAC12", "SIGAD12", "SIGAE12",
"SIGAF12", "SIGAG12", "SIGAH12", "SIGAE8", "SIGAF8",
"SIGAG8", "SIGAH8", "SIGAF11", "SIGAG11", "SIGAH11")
individual_dict <- data.frame(samples = sample_order, row.names = sample_order)
individual_dict$individual <- c(paste0("individual ", 1:8),
"embryo pool 1", "embryo pool 2",
"individual 9", rep("individual 10", 4),
rep("individual 11", 4), rep("individual 12", 3),
rep("individual 13", 4))
head(individual_dict)
individual_dict
sdrf$Characteristics.individual. <- individual_dict[sdrf$Source.Name, "individual"]
tail(sdrf)
write.table(sdrf,
paste0(dir_path, "E-MTAB-11836_v2~/submission14669_annotare_fixed.sdrf.txt"),
header = TRUE, sep = "\t",
row.names = F, quote=F,
col.names = T)
write.table(sdrf,
paste0(dir_path, "E-MTAB-11836_v2~/submission14669_annotare_fixed.sdrf.txt"),
sep = "\t", row.names = F, quote=F, col.names = T)
setwd("G:/My Drive/Postgrad/PhD/Projects/")
devtools::create("testwidget")
htmlwidgets::scaffoldWidget("testwidget")
devtools::document()                       # roxygenize, so NAMESPACE is updated
setwd("G:/My Drive/Postgrad/PhD/Projects/testwidget")
htmlwidgets::scaffoldWidget("testwidget")
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(testwidget)
testwidget("hello, world")
